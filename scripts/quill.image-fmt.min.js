var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);
    if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;
        if (getter === undefined) {
            return undefined;
        }
        return getter.call(receiver);
    }
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var BaseImageFormat = Quill.import('formats/image');
var BaseVideoFormat = Quill.import('formats/video');
var ImageFormatAttributesList = ['alt', 'height', 'width', 'style'];

var ImageFormat = function (_BaseImageFormat) {
    _inherits(ImageFormat, _BaseImageFormat);

    function ImageFormat() {
        _classCallCheck(this, ImageFormat);

        return _possibleConstructorReturn(this, (ImageFormat.__proto__ || Object.getPrototypeOf(ImageFormat)).apply(this, arguments));
    }

    _createClass(ImageFormat, [{
        key: 'format',
        value: function format(name, value) {
            if (ImageFormatAttributesList.indexOf(name) > -1) {
                if (value) {
                    this.domNode.setAttribute(name, value);
                } else {
                    this.domNode.removeAttribute(name);
                }
            } else {
                _get(ImageFormat.prototype.__proto__ || Object.getPrototypeOf(ImageFormat.prototype), 'format', this).call(this, name, value);
            }
        }
    }], [{
        key: 'formats',
        value: function formats(domNode) {
            return ImageFormatAttributesList.reduce(function (formats, attribute) {
                if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                }
                return formats;
            }, {});
        }
    }]);

    return ImageFormat;
}(BaseImageFormat);

var VideoFormat = function (_BaseImageFormat) {
    _inherits(VideoFormat, _BaseImageFormat);

    function VideoFormat() {
        _classCallCheck(this, VideoFormat);

        return _possibleConstructorReturn(this, (VideoFormat.__proto__ || Object.getPrototypeOf(VideoFormat)).apply(this, arguments));
    }

    _createClass(VideoFormat, [{
        key: 'format',
        value: function format(name, value) {
            if (ImageFormatAttributesList.indexOf(name) > -1) {
                if (value) {
                    this.domNode.setAttribute(name, value);
                } else {
                    this.domNode.removeAttribute(name);
                }
            } else {
                _get(VideoFormat.prototype.__proto__ || Object.getPrototypeOf(VideoFormat.prototype), 'format', this).call(this, name, value);
            }
        }
    }], [{
        key: 'formats',
        value: function formats(domNode) {
            return ImageFormatAttributesList.reduce(function (formats, attribute) {
                if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                }
                return formats;
            }, {});
        }
    }]);

    return VideoFormat;
}(BaseVideoFormat);

Quill.register(ImageFormat, true);
Quill.register(VideoFormat, true);